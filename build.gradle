plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.github.jinahya'
version = '0.0.1-SNAPSHOT'

java {
//    sourceCompatibility = '21'
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'com.github.ben-manes.caffeine:caffeine'
//    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.100.Final:osx-aarch_64'
    testImplementation 'io.projectreactor:reactor-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.data:spring-data-commons'
}

tasks.named('test') {
    useJUnitPlatform()
}

// ---------------------------------------------------------------------------------------------------------------------

//final TAG_LONG_RUNNING = "long-running"
final TEST_NAME_PATTERN_INTEGRATION = "*IT"

tasks.withType(Test) {
    testLogging.showStandardStreams = true
}

tasks.named('test') {
    useJUnitPlatform {
//        excludeTags TAG_LONG_RUNNING
    }
    filter {
        excludeTestsMatching TEST_NAME_PATTERN_INTEGRATION
    }
    if (!System.properties.containsKey('spring.profiles.active')) {
        systemProperty "spring.profiles.active", "default"
    }
}

//tasks.register("testLongRunning", Test) {
//    // https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_additional_test_types.html
//    description = 'Runs long-running tests.'
//    group = 'verification'
//    useJUnitPlatform {
//        includeTags TAG_LONG_RUNNING
//    }
//    filter {
//        excludeTestsMatching TEST_NAME_PATTERN_INTEGRATION
//    }
//    if (!System.properties.containsKey('spring.profiles.active')) {
//        systemProperty "spring.profiles.active", "default" // equivalent to "development,private"
//    }
//    shouldRunAfter(test)
//}

tasks.register("integrationTest", Test) {
    // https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_additional_test_types.html
    description = 'Runs integration tests.'
    group = 'verification'
    useJUnitPlatform {
//        excludeTags TAG_LONG_RUNNING
    }
    filter {
        includeTestsMatching TEST_NAME_PATTERN_INTEGRATION
    }
    shouldRunAfter(test)
    if (!System.properties.containsKey('spring.profiles.active')) {
        systemProperty "spring.profiles.active", "default" // equivalent to "development,private"
    }
}

//tasks.register("integrationTestLongRunning", Test) {
//    // https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_additional_test_types.html
//    description = "Runs ..ITs with @Tag(\"" + TAG_LONG_RUNNING + "\")"
//    group = 'verification'
//    useJUnitPlatform {
//        includeTags TAG_LONG_RUNNING
//    }
//    filter {
//        includeTestsMatching TEST_NAME_PATTERN_INTEGRATION
//    }
//    shouldRunAfter(integrationTest)
//    if (!System.properties.containsKey('spring.profiles.active')) {
//        systemProperty "spring.profiles.active", "local" // equivalent to "development,private"
//    }
//}

jar {
    enabled = false // jar file 이 두개 생겨서 배포후 실행이 안됨.
}

bootJar {
    // https://stackoverflow.com/a/56497522/330457
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

bootRun {
    if (!System.properties.containsKey('spring.profiles.active')) {
        project.logger.info("setting spring.profiles.active with 'default'...");
        systemProperty "spring.profiles.active", "default" // equivalent to "development,private"
    }
}
